generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Producto {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String?
  precio      Float
  stock       Int       @default(0)
  categoriaId Int
  createdAt   DateTime  @default(now())
  imagen      String?
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  productos Producto[]
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String     @db.VarChar(255)
  nombre    String?
  role      Role
  createdAt DateTime   @default(now())
  permisos  Permiso[]  // Relación con la tabla de permisos
}


model Empresa {
  id           Int     @id @default(autoincrement())
  nombre       String
  descripcion  String?
  email        String
  telefono     String
  direccion    String?
  ciudad       String?
  CodigoPostal Int?
  limitStock   Int
  paginacion   Int?    @default(25)
}

view Producto_V {
  id               Int       @id
  nombre           String?
  descripcion      String?
  precio           Float?
  stock            Int?
  createdAt        DateTime?
  imagen           String?
  categoriaId      Int?
  categoria_nombre String?
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view categoria_v {
  id               Int     @id
  nombre           String?
  productosenstock Int?
}

enum Role {
  ADMIN
  USER
}
model Navegacion {
  id        Int        @id @default(autoincrement())
  nombre    String
  ruta      String     // Ruta para acceder al módulo
  icono     String     // Ícono representativo del módulo
  permisos  Permiso[]  // Relación con la tabla de permisos
}
model Permiso {
  id             Int      @id @default(autoincrement())
  usuarioId      Int
  navegacionId   Int
  ver            Boolean  @default(false)
  editar         Boolean  @default(false)
  eliminar       Boolean  @default(false)
  crear          Boolean  @default(false)

  usuario        User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  navegacion     Navegacion @relation(fields: [navegacionId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, navegacionId]) // Evita duplicados
}